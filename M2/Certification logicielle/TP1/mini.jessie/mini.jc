# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 mini(int32 a, int32 b)
behavior default:
  ensures (_C_3 : ((_C_4 : ((\result == \at(a,Old)) ||
                             (\result == \at(b,Old)))) &&
                    (_C_5 : (((\result == \at(a,Old)) &&
                               (\at(a,Old) <= \at(b,Old))) ||
                              ((\result == \at(b,Old)) &&
                                (\at(b,Old) <= \at(a,Old)))))));
{  
   (var int32 tmp);
   
   {  (if (a > b) then (_C_2 : (tmp = b)) else (_C_1 : (tmp = a)));
      
      (return tmp)
   }
}
