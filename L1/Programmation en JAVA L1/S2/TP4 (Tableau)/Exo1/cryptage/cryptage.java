public class cryptage {//ne marche qu'avec les caractère allant des valeurs 32 à 126 de la table ASCII	static final int N = 100; //taille max de la chaîne de caractere à crypter	static class clefDeCryptage{	char [] [] asso = new char [2][94]; //tableau à deux dimensions contenant ttes les associations de caractère : dimension 0 contenant les caractere à crypter, dimension 1 contient les caractere une fois crypter	//94 est le nombre de caractere compris entre les valeurs 32 et 126 	//de la table ASCII donc pas de caractère accentués ni de symbole différents des opérateurs, ponctuations, des crochets/guillemets/accolade et accents seuls : 32-126 = 94	String code=""; //code de décryptage de 8 chiffre} static int  nombreRandom(){ //tire un nombre aléatoire entre 0 et 9	 int n;	 n=(int)(Math.random() * 10);	 if(n==10)n--; //si n = 10 on enlève 1	return n; }  static char [][] assoCryptage(){	 char [][] asso = new char [2][94];	 int i;	 for(i=0;i<94;i++){ //on remplis la dimension contenant les caractère avant le cryptage		asso[0][i]=(char)(i+32);	 }	 for(i=0;i<94;i++){ //on remplis la dimension contenant les caractères une fois cryptés		 if(i+37<127)asso[1][i]=(char)(i+37); //les 89 premiers caracteres prennent les valeurs 37 à 126		 else asso[1][i]=(char)((i+36)-94); //les 5 dernieres les valeurs 32 à 36	 }	 return asso; }  static void affichageAsso(char [][] asso){	 int i;	 Ecran.sautDeLigne();	 for(i=0;i<94;i++){		 Ecran.afficherln(asso[0][i]," non crypté = ",asso[1][i]," crypté");	 } }  static String codeCryptageRandom(){	int i;	String code="";	for(i=0;i<7;i++){ //on créer une clé de décryptage aléatoire		code+=nombreRandom();	}	Ecran.afficherln("La clef est : ",code);	return code; }  static char[] txtToTabChar(String txt){ //on remplis un tableau de N char avec les caractere de la chaîne	 int i;	 char [] t= new char [txt.length()];	 for(i=0;i<t.length;i++){		 t[i]=txt.charAt(i);	 }	 return t; }  static String cryptageTxt(String txt, clefDeCryptage clef){ //on crypte la chaîne	 String txtCrypted="";	 char [] t = new char [txt.length()];	 int i,j=0;	 boolean run=true; //indique si on doit continuer à chercher une correspondance entre caractère	 t=txtToTabChar(txt);	 char c=' ';	 for(i=0;i<t.length;i++){ //un pas est un caractere crypté		 do{//un pas est un caractère recherché			 if(t[i]==clef.asso[0][j]){ // le caractere de la chaine équivaut au caractere de l'association				 c=clef.asso[1][j]; //on crypte le caractère				 run=false;			 }			 else if (j==93){				 c=t[i]; //si le caractere n'es pas dans une association on l'affiche tel quel				 j++;				 run=false;				}			 else j++;		 }while(run==true && j<94);		 run=true;		 j=0;		 txtCrypted+=c; //on construit la chaîne crypté au fur et à mesure	 }	 return txtCrypted; }  static void tentativeDecryptageTxt(String txtCrypt, clefDeCryptage clef){	 String codeSaisis="",code=clef.code;	 int tentative=3;	 do{		 Ecran.afficherln("\nTentives restantes : ",tentative," \nSaisir le code : ");		 codeSaisis=Clavier.saisirString();		 if(code.equals(codeSaisis)) decryptageTxt(txtCrypt,clef); //on décrypte le texte		 else if(tentative==0) Ecran.afficherln("Nombre de tentatives expirés."); //plus de tentative restantes		 else Ecran.afficher("\nErreur de saisie\n"); //tentive restante et faux code		 tentative--;	 }while(tentative>0 && !(code.equals(codeSaisis))); }  static void decryptageTxt(String txtCrypt,clefDeCryptage clef){//décryptage et affichage du texte décrypté	 String txtUncrypted="";	 char [] t = new char [txtCrypt.length()];	 int i,j=0;	 boolean run=true; //indique si on doit continuer à chercher une correspondance entre caractère	 char c=' ';	 t=txtToTabChar(txtCrypt);	 for(i=0;i<t.length;i++){ //un pas est un caractere décrypté		 do{//un pas est un caractère recherché			 if(t[i]==clef.asso[1][j]){ // si le caractere de la chaine équivaut au caractere de l'association				 c=clef.asso[0][j]; //on crypte le caractère				 run=false;			 }			 else if (j==93){ //si le caractere ne correspond à aucune association on l'affiche tel quel				 c=t[i];				 j++;				 run=false;				}			 else j++;		 }while(run==true && j<94);		 run=true;		 j=0;		 txtUncrypted+=c; //on construit la chaîne décrypté au fur et à mesure	 }	 Ecran.afficherln("\n\nVotre texte décrypté : \n\n");	 Ecran.afficherln(txtUncrypted); }  public static void main (String [] args) {	String txt=""; //chaîne de caractere contenant le texte à crypter de taille < N ET >0	clefDeCryptage x = new clefDeCryptage();	int i;	do{ //saisis tu texte de maximum N caractere		Ecran.afficher("SVP saisir un texte à crypter contenant entre 1 et ",N," caractere: \n");		txt=Clavier.saisirString();	}while(txt.length()<1 || txt.length() >N);	x.code=codeCryptageRandom();	x.asso=assoCryptage();	txt=cryptageTxt(txt,x);	Ecran.afficherln("\n\nVotre texte crypté : \n");	Ecran.afficherln(txt);	tentativeDecryptageTxt(txt,x);}}