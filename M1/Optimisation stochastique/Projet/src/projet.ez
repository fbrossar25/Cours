/*________________________________________________________________________________________________
Projet de recherche stochastique : Université de Strasbourg (2017-2018) M1 ILC
Brossard Florian
Dvornichenko Kateryna
Création d'un emplois du temps
________________________________________________________________________________________________*/

\User declarations:
	#include <string>
	#include <cstring>
	#include <iostream>

	#define PENALITE_OBLIGATOIRE 	10000
	#define PENALITE_FORTE			1000
	#define PENALITE_FAIBLE			1

	//Jours de la semaine
	#define JOUR_LUNDI 0
	#define JOUR_MARDI 1
	#define JOUR_MERCREDI 2
	#define JOUR_JEUDI 3
	#define JOUR_VENDREDI 4

	#define NB_JOURS 180 //52 semaines avec 5 jours d'écoles - 16 semaines de vacances
	#define NB_CRENEAUX_JOUR 4 		// 4 creneaux par jours
	#define NB_CRENEAUX 720 //nombre de creneaux potentiel sur l'année

	#define SPEC_L0 0			// Pas de spécialisation en L0
	#define SPEC_CE	1			// Chemical Engineering
	#define SPEC_CS	2			// Computer Science
	#define SPEC_GE	3			// Geophysical Engineering
	#define SPEC_OG	4			// Oil and Gas

	#define SALLE_CM 0			//Salle CM
	#define SALLE_TD 1			//Salle TD
	#define SALLE_LANG 2		//Salle langue
	#define SALLE_INFO 3		//Salle info
	#define SALLE_LABO 4		//Salle physique-chimie

	#define NB_SALLE_CM 2 		//(160 places) : pour la L0 les TD se font en CM également 
	#define NB_SALLE_TD 5		//(40 places)
	#define NB_SALLE_LANG 7		//(20 places)
	#define NB_SALLE_INFO 2		//(20 places)
	#define NB_SALLE_LABO 2		//(20 places)

	#define PROF_VACATAIRE 0	//Prof vacataire
	#define PROF_PLEIN_TEMPS 1	//Prof à plein temps
	#define PROF_MI_TEMPS 2		//Prof à mi-temps

	#define NB_PROF_MATH 3		//Nombre de profs de math
	#define NB_PROF_PHYSIQUE 4	//Nombre de profs de physique
	#define NB_PROF_INFO 4		//Nombre de profs de info
	#define NB_PROF_CHIMIE 4	//Nombre de profs de chimie
	#define NB_PROF_ANGLAIS 4	//Nombre de profs de anglais
	#define NB_PROF_FRANCAIS 5	//Nombre de profs de francais
	
	#define NB_PROFS 24

	#define NB_GROUPES 16 		// 16 groupes de TP de 20 élèves
	#define NB_COURS 5 			// Nombres de groupes de cours dans l'année
	#define NB_SALLES 5 		// 4 spec en L1 + 1 tronc commun en L0

	//type de profs
	#define PROF_MATH 0
	#define PROF_PHYSIQUE 1
	#define PROF_INFO 2
	#define PROF_CHIMIE 3
	#define PROF_ANGLAIS 4
	#define PROF_FRANCAIS 5
	
	#define TYPE_COURS 4 //CM, CI, TD et TP

	//on regroupe les cours par type
	#define COURS_MATH 0
	#define COURS_PHYSIQUE 1
	#define COURS_INFO 2
	#define COURS_CHIMIE 3
	#define COURS_ANGLAIS 4
	#define COURS_FRANCAIS 5
	
	//Cours L0
	//S1
	const int NB_S1_MATH[] = {0, 42, 0, 0}; //0 CM, 42 CI, 0 TD, 0 TP 
	const int NB_S1_PHYS[] = {0, 42, 0, 0}; 
	const int NB_S1_CHIM[] = {0, 42, 0, 0}; 
	const int NB_S1_INFO[] = {0, 56, 0, 0}; 
	const int NB_S1_FRANCAIS[] = {0, 42, 0, 42}; 
	const int NB_S1_ANGLAIS[] = {0, 70, 0, 42}; 
	const int NB_S1_OTHER[] = {0, 0, 0, 14};  //methode
	
	//S2
	const int NB_S2_MATH[] = {20, 64, 0, 0}; 
	const int NB_S2_PHYS[] = {14, 28, 0, 21}; 
	const int NB_S2_INFO[] = {10, 32, 0, 21};
	const int NB_S2_CHIM[] = {14, 28, 0, 21};  
	const int NB_S2_FRANCAIS[] = {0, 42, 0, 0}; 
	const int NB_S2_ANGLAIS[] = {0, 42, 0, 0}; 
	const int NB_S2_OTHER[] = {0, 0, 8, 28};  //projet
	
	//Cours L1
	//S3 Commun
	const int NB_S3_MATH[] = {30, 0, 42, 0};
	const int NB_S3_FRANCAIS[] = {0, 36, 0, 0};
	const int NB_S3_ANGLAIS[] = {0, 36, 0, 0};
	const int NB_S3_OTHER[] = {0, 0, 0, 0};
	//Specialités
	const int NB_S3CE_PHYS[] = {48, 0, 48, 0};
	const int NB_S3CS_PHYS[] = {48, 0, 48, 0};
	const int NB_S3GE_PHYS[] = {48, 30, 48, 0}; // + Earth Science
	const int NB_S3OG_PHYS[] = {63, 0, 57, 6}; // + Elec
	const int NB_S3CE_INFO[] = {12, 0, 12, 12};
	const int NB_S3CS_INFO[] = {48, 0, 33, 45}; // + Admin et C
	const int NB_S3GE_INFO[] = {12, 0, 12, 12};
	const int NB_S3OG_INFO[] = {12, 0, 12, 12};
	const int NB_S3CE_CHIM[] = {45, 0, 36, 36}; //Chemical eng + chem
	const int NB_S3CS_CHIM[] = {0, 0, 0, 0};
	const int NB_S3GE_CHIM[] = {30, 0, 21, 21};
	const int NB_S3OG_CHIM[] = {30, 0, 21, 21};
	
	//S4 Commun
	const int NB_S4_FRANCAIS[] = {0, 36, 0, 36};
	const int NB_S4_ANGLAIS[] = {0, 36, 0, 36};
	const int NB_S4_OTHER[] = {6, 0, 6, 6}; //introduction to the business world
	//Spec
	const int NB_S4CE_MATH[] = {30, 0, 42, 0};
	const int NB_S4CS_MATH[] = {30, 0, 42, 0};
	const int NB_S4GE_MATH[] = {30, 0, 42, 0};
	const int NB_S4OG_MATH[] = {45, 0, 48, 9}; // + Statistics
	const int NB_S4CE_PHYS[] = {36, 0, 36, 0};
	const int NB_S4CS_PHYS[] = {36, 0, 36, 0};
	const int NB_S4GE_PHYS[] = {36, 30, 36, 0}; // + Earth Science
	const int NB_S4OG_PHYS[] = {36, 0, 36, 0}; 
	const int NB_S4CE_INFO[] = {12, 0, 12, 12};
	const int NB_S4CS_INFO[] = {51, 0, 51, 36}; // + Data Structires and Archi
	const int NB_S4GE_INFO[] = {12, 0, 12, 12};
	const int NB_S4OG_INFO[] = {12, 0, 12, 12};
	const int NB_S4CE_CHIM[] = {45, 0, 45, 36}; //Chemical eng + chem
	const int NB_S4CS_CHIM[] = {0, 0, 0, 0};
	const int NB_S4GE_CHIM[] = {30, 0, 30, 21};
	const int NB_S4OG_CHIM[] = {30, 0, 30, 21};
	
	
	//define de toutes les matieres (en nombre de creneau, 1 creaneau = )
	//L0 S1
	#define int NB_CRENEAUX_S1_MATH_CI 28
	#define int NB_CRENEAUX_S1_PHYS_CI 28
	#define int NB_CRENEAUX_S1_CHIM_CI 28
	#define int NB_CRENEAUX_S1_INFO_CI 38
	#define int NB_CRENEAUX_S1_FRANCAIS_CI 28
	#define int NB_CRENEAUX_S1_FRANCAIS_TP 28
	#define int NB_CRENEAUX_S1_ANGLAIS_CI 47
	#define int NB_CRENEAUX_S1_ANGLAIS_TP 28
	#define int NB_CRENEAUX_S1_OTHER_TP 10
	
	//L0 S2
	#define int NB_CRENEAUX_S2_MATH_CM 14
	#define int NB_CRENEAUX_S2_MATH_CI 43
	#define int NB_CRENEAUX_S2_PHYS_CM 10
	#define int NB_CRENEAUX_S2_PHYS_CI 19
	#define int NB_CRENEAUX_S2_PHYS_TP 14
	#define int NB_CRENEAUX_S2_CHIM_CM 10
	#define int NB_CRENEAUX_S2_CHIM_CI 19
	#define int NB_CRENEAUX_S2_CHIM_TP 14
	#define int NB_CRENEAUX_S2_INFO_CM 7
	#define int NB_CRENEAUX_S2_INFO_CI 22
	#define int NB_CRENEAUX_S2_INFO_TP 14
	#define int NB_CRENEAUX_S2_FRANCAIS_CI 28
	#define int NB_CRENEAUX_S2_ANGLAIS_CI 28
	#define int NB_CRENEAUX_S2_OTHER_TD 6
	#define int NB_CRENEAUX_S2_OTHER_TP 19
	
	//L1 S3
	#define int NB_CRENEAUX_S3_MATH_CM 20
	#define int NB_CRENEAUX_S3_MATH_TD 28
	
	#define int NB_CRENEAUX_S3CE_PHYS_CM 32
	#define int NB_CRENEAUX_S3CE_PHYS_TD 32
	#define int NB_CRENEAUX_S3CS_PHYS_CM 32
	#define int NB_CRENEAUX_S3CS_PHYS_TD 32
	#define int NB_CRENEAUX_S3GE_PHYS_CM 32
	#define int NB_CRENEAUX_S3GE_PHYS_CI 20
	#define int NB_CRENEAUX_S3GE_PHYS_TD 32
	#define int NB_CRENEAUX_S3OG_PHYS_CM 42
	#define int NB_CRENEAUX_S3OG_PHYS_TD 38
	#define int NB_CRENEAUX_S3OG_PHYS_TP 4
	
	#define int NB_CRENEAUX_S3CE_CHIM_CM 30
	#define int NB_CRENEAUX_S3CE_CHIM_TD 24
	#define int NB_CRENEAUX_S3CE_CHIM_TP 24
	#define int NB_CRENEAUX_S3GE_CHIM_CM 20
	#define int NB_CRENEAUX_S3GE_CHIM_TD 14
	#define int NB_CRENEAUX_S3GE_CHIM_TP 14
	#define int NB_CRENEAUX_S3OG_CHIM_CM 20
	#define int NB_CRENEAUX_S3OG_CHIM_TD 14
	#define int NB_CRENEAUX_S3OG_CHIM_TP 14
	
	#define int NB_CRENEAUX_S3CE_INFO_CM 8
	#define int NB_CRENEAUX_S3CE_INFO_CI 8
	#define int NB_CRENEAUX_S3CE_INFO_TP 8
	#define int NB_CRENEAUX_S3CS_INFO_CM 30
	#define int NB_CRENEAUX_S3CS_INFO_TD 24
	#define int NB_CRENEAUX_S3CS_INFO_TP 24
	#define int NB_CRENEAUX_S3GE_INFO_CM 8
	#define int NB_CRENEAUX_S3GE_INFO_TD 8
	#define int NB_CRENEAUX_S3GE_INFO_TP 8
	#define int NB_CRENEAUX_S3OG_INFO_CM 8
	#define int NB_CRENEAUX_S3OG_INFO_TD 8
	#define int NB_CRENEAUX_S3OG_INFO_TP 8
	
	#define int NB_CRENEAUX_S3_FRANCAIS_CI 24
	#define int NB_CRENEAUX_S3_ANGLAIS_CI 24
	#define int NB_CRENEAUX_S3_OTHER_TD 6
	
	
	//L2 S4
	#define int NB_CRENEAUX_S4CE_MATH_CM 20
	#define int NB_CRENEAUX_S4CE_MATH_TD 28
	#define int NB_CRENEAUX_S4CS_MATH_CM 20
	#define int NB_CRENEAUX_S4CS_MATH_TD 28
	#define int NB_CRENEAUX_S4GE_MATH_CM 20
	#define int NB_CRENEAUX_S4GE_MATH_TD 28
	#define int NB_CRENEAUX_S4OG_MATH_CM 30
	#define int NB_CRENEAUX_S4OG_MATH_TD 31
	#define int NB_CRENEAUX_S4OG_MATH_TP 6
	                         
	#define int NB_CRENEAUX_S4CE_PHYS_CM 24
	#define int NB_CRENEAUX_S4CE_PHYS_TD 24
	#define int NB_CRENEAUX_S4CS_PHYS_CM 24
	#define int NB_CRENEAUX_S4CS_PHYS_TD 24
	#define int NB_CRENEAUX_S4GE_PHYS_CM 24
	#define int NB_CRENEAUX_S4GE_PHYS_CI 20
	#define int NB_CRENEAUX_S4GE_PHYS_TD 24
	#define int NB_CRENEAUX_S4OG_PHYS_CM 24
	#define int NB_CRENEAUX_S4OG_PHYS_TD 24
	                         
	#define int NB_CRENEAUX_S4CE_CHIM_CM 30
	#define int NB_CRENEAUX_S4CE_CHIM_TD 30
	#define int NB_CRENEAUX_S4CE_CHIM_TP 24
	#define int NB_CRENEAUX_S4GE_CHIM_CM 20
	#define int NB_CRENEAUX_S4GE_CHIM_TD 20
	#define int NB_CRENEAUX_S4GE_CHIM_TP 14
	#define int NB_CRENEAUX_S4OG_CHIM_CM 20
	#define int NB_CRENEAUX_S4OG_CHIM_TD 20
	#define int NB_CRENEAUX_S4OG_CHIM_TP 14
	                         
	#define int NB_CRENEAUX_S4CE_INFO_CM 8
	#define int NB_CRENEAUX_S4CE_INFO_CI 8
	#define int NB_CRENEAUX_S4CE_INFO_TP 8
	#define int NB_CRENEAUX_S4CS_INFO_CM 34
	#define int NB_CRENEAUX_S4CS_INFO_TD 34
	#define int NB_CRENEAUX_S4CS_INFO_TP 24
	#define int NB_CRENEAUX_S4GE_INFO_CM 8
	#define int NB_CRENEAUX_S4GE_INFO_TD 8
	#define int NB_CRENEAUX_S4GE_INFO_TP 8
	#define int NB_CRENEAUX_S4OG_INFO_CM 8
	#define int NB_CRENEAUX_S4OG_INFO_TD 8
	#define int NB_CRENEAUX_S4OG_INFO_TP 8
	                         
	#define int NB_CRENEAUX_S4_FRANCAIS_CI 24
	#define int NB_CRENEAUX_S4_ANGLAIS_CI 24
	#define int NB_CRENEAUX_S4_FRANCAIS_TP 24
	#define int NB_CRENEAUX_S4_ANGLAIS_TP 24
	#define int NB_CRENEAUX_S4_OTHER_CM 4
	#define int NB_CRENEAUX_S4_OTHER_TD 4
	#define int NB_CRENEAUX_S4_OTHER_TP 4
	
\end

\User functions:
	/* fonction d'affichage */
	string cmpTiret(int unsigned n)
	{
		string Emot = "";
		while (Emot.length() < n)
		{
			Emot += "-";
		} 
		return Emot;
	}
	/* Fonctions d'affichage, utilisées pour placer des espaces à coté du texte.			*/
	string cmpEspaceAlignGauche(string mot, int unsigned n)
		{ string Emot = mot; if ((Emot.length() > n) && (n > 2)) { Emot = mot.substr(0,n-3) + "..."; }
		while (Emot.length() < n) { Emot = Emot + " "; } return Emot; }
	string cmpEspaceAlignCentre(string mot, int unsigned n)
		{ string Emot = mot; bool pos = true; if ((Emot.length() > n) && (n > 2)) { Emot = mot.substr(0,n-3) + "..."; }
		while (Emot.length() < n) { if (pos) { Emot = Emot + " "; pos = false; }  else { Emot = " " + Emot; pos = true; } } return Emot; }
	string cmpEspaceAlignDroite(string mot, int unsigned n)
		{ string Emot = mot; if ((Emot.length() > n) && (n > 2)) { Emot = mot.substr(0,n-3) + "..."; }
		while (Emot.length() < n) { Emot = + " " + Emot; } return Emot; }
	/* Fonction de convertion, permet de changer une valeur numérique en texte pour son affichage	*/
	template<typename T>
	string chiffre2string(T c)
	{
		ostringstream oss;
		oss << c;
		return oss.str();
	}
\end

/* -------------------------------------------------------------------------------------------- */

/************************************************************************************************/
/*******************///             DECLARATION DES CLASSES               ///********************/
/************************************************************************************************/
\User classes :

/* Classe représentant un cours. Un cours se compose de chaque élément ci-dessous.		*/
Cours
{
	int		groupes [4];			/* représente les groupes participants (initialisé à -1 si pas de groupe)	*/
	int		matiere;				/* représente une matière		*/
    
 	int		prof;					/* représente un prof			*/
	int		salle;					/* représente une salle			*/
	int		creneau;				/* représente un créneau (de 0 à NB_CRENEAUX)	*/
}

/* Classe représentant un groupe de TP de 20 etudiants.					*/
Groupe
{
	int		specialisation;				/* type de diplome */
	//int		occupation	[NB_CRENEAUX_JOUR];	/* indique si présente dans le créneau	*/
	//si matiere[i] == 0 -> pas d'occupation
	int		matiere		[NB_CRENEAUX_JOUR];	/* indique la matière dans le créneau	*/
}

/* Classe représentant un enseignant.							*/
Prof
{
	char 	id; //correspond à A,B,C ou D sur le sujet
	int		potentiel;						/* indique son nombre d'horaires	*/
	//int		occupation	[NB_CRENEAUX_JOUR];	/* indique si présent dans le créneau	*/
	int		matiere;						//matiere enseignée par le prof
	int		classe		[NB_CRENEAUX_JOUR];		/* indique la classe dans le créneau	*/
}

/* Classe représentant une salle de cours.							*/
Salle
{
	int		potentiel;					/* indique le nombre d'élève max dans la salle */
	int		type;						//type de la salle
	int		occupation	[NB_CRENEAUX_JOUR];	/* indique si occupée dans le créneau	*/
}

Creneau
{
	int horaire; //0 -> 8H30, 1 -> 10H15, 2 -> 12H45, 3 -> 14H30
	int potentiel; // initialisé à NB_SALLES, si < 0, il y plus de cours qui de salles le même jour au même creneau
}

/* Classe représentant un génome, soit un emplois du temps complet.				*/
GenomeClass
{ 
	Cours*	cours			[NB_COURS];	/* les cours				*/
	Groupe*	groupes			[NB_GROUPES];	/* les groupes TP				*/
	Prof*	profs			[NB_PROFS];	/* les profs				*/
	Salle*	salles			[NB_SALLES];	/* les salles				*/
	Creneau* 	creneaux		[NB_CRENEAUX]; /* les creneaux */
}

\end
/* -------------------------------------------------------------------------------------------- */

\GenomeClass::display:
	//TODO affichage console
	std::cout << NB_PROFS << std::endl;
\end

\GenomeClass::initialiser:

	//initialisation des groupes de TP

	Groupe* g;
	if(NB_GROUPES != 16)
	{
		for(int i=0; i<NB_GROUPES; i++)
		{
			Genome.groupes[i] = new Groupe();
			g->specialisation = SPEC_L0;
		}
	}
	else
	{		
		for(int i=0; i<NB_GROUPES; i++ ) 
		{
			g = new Groupe();
			if(i<8) //8 groupes de L0
			{
				g->specialisation = SPEC_L0;
			}
			else if(i<10) //2 groupes chimie
			{
				g->specialisation = SPEC_CE;
			}
			else if(i<12) //2 groupes info
			{
				g->specialisation = SPEC_CS;
			}
			else if(i < 14) //2 groupes geophysique
			{
				g->specialisation = SPEC_GE;
			}
			else			//2 groupes roi du petrole
			{
				g->specialisation = SPEC_OG;
			}
			Genome.groupes[i] = g;
		}
	}

	//initialisation des profs

	if(NB_PROFS != (NB_PROF_MATH + NB_PROF_PHYSIQUE + NB_PROF_INFO
					+ NB_PROF_FRANCAIS + NB_PROF_ANGLAIS + NB_PROF_CHIMIE))
	{
		std::err << "Erreur : le nombre de profs ne correspond pas à la somme des nombres de profs de chaque matière" << std::endl;
		exit (EXIT_FAILURE);
	}
	for(int i=0; i<NB_PROFS; i++)
	{
		Genome.profs[i] = new ProfsClass();
	}
	int compteur = 0;
	for(int i=0; i<NB_PROF_MATH; i++) 
	{
		Genome.profs[compteur]->potentiel = 384; //3 prof de math plein temps (384 heure/an)
		Genome.profs[compteur]->matiere = PROF_MATH;
		Genome.profs[compteur]->id = (char)('A' + i);
		compteur++;
	}
	for(int i=0; i<NB_PROF_PHYSIQUE; i++) 
	{
		Genome.profs[compteur]->matiere = PROF_PHYSIQUE;
		Genome.profs[compteur]->id = (char)('A' + i);
		if(i < 2)
		{
			Genome.profs[i]->potentiel = 384;
		}
		else if(i == 3)
		{
			Genome.profs[i]->potentiel = 192;
		}
		else
		{
			Genome.profs[i]->potentiel = 0;
		}
		compteur++;
	}
	for(int i=0; i<NB_PROF_INFO; i++) 
	{
		Genome.profs[compteur]->matiere = PROF_INFO;
		Genome.profs[compteur]->id = (char)('A' + i);
		if(i < 2)
		{
			Genome.profs[i]->potentiel = 384;
		}
		else if(i == 3)
		{
			Genome.profs[i]->potentiel = 192;
		}
		else
		{
			Genome.profs[i]->potentiel = 0;
		}
		compteur++;
	}
	for(int i=0; i<NB_PROF_CHIMIE; i++) 
	{
		Genome.profs[compteur]->matiere = PROF_CHIMIE;
		Genome.profs[compteur]->id = (char)('A' + i);
		if(i < 2)
		{
			Genome.profs[i]->potentiel = 384;
		}
		else
		{
			Genome.profs[i]->potentiel = 192;
		}
		compteur++;
	}
	for(int i=0; i<NB_PROF_ANGLAIS; i++) 
	{
		Genome.profs[compteur]->matiere = PROF_ANGLAIS;
		Genome.profs[compteur]->id = (char)('A' + i);
		Genome.profs[i]->potentiel = 384;
		compteur++;
	}
	for(int i=0; i<NB_PROF_FRANCAIS; i++) 
	{
		Genome.profs[compteur]->matiere = PROF_FRANCAIS;
		Genome.profs[compteur]->id = (char)('A' + i);
		if(i < 2)
		{
			Genome.profs[i]->potentiel = 384;
		}
		else if(i < 4)
		{
			Genome.profs[i]->potentiel = 192;
		}
		else
		{
			Genome.profs[i]->potentiel = 0;
		}
		compteur++;
	}

	//initialisation des salles

	for(int i=0; i<NB_SALLES; i++)
	{
		Genome.salles[i]			= new Salle();
		if(i<2)
		{
			Genome.salles[i]->type			= SALLE_CM;
			Genome.salles[i]->potentiel		= 160;
		}
		else if(i < 7)
		{
			Genome.salles[i]->type			= SALLE_TD;
			Genome.salles[i]->potentiel		= 40;
		}
		else if(i < 14)
		{
			Genome.salles[i]->type			= SALLE_LANG;
			Genome.salles[i]->potentiel		= 20;
		}
		else if(i < 16)
		{
			Genome.salles[i]->type			= SALLE_INFO;
			Genome.salles[i]->potentiel		= 20;
		}
		else
		{
			Genome.salles[i]->type			= SALLE_LABO;
			Genome.salles[i]->potentiel		= 20;
		}
	}

	//initialisation des cours
	for(int i=0; i<NB_COURS; i++ ) 
	{
		Genome.cours[i]			= new Cours();
		Genome.cours[i]->matiere	= -1;
		Genome.cours[i]->prof	= -1;
		Genome.cours[i]->salle	= -1;
		Genome.cours[i]->creneau	= -1;
		for(int j = 0; j < 4; j++)
		{
			Genome.cours[i]->groupes[j]	= -1;
		}
	}

	//initialisation des creneaux
	for(int i=0; i<NB_CRENEAUX; i++ ) 
	{
		Genome.creneaux[i] = new Creneau();
		Genome.creneaux[i]->potentiel = NB_SALLES;
		Genome.creneaux[i]->horaire = i % 4;
	}

	//TODO poser tous les cours aléatoirement ?
\end

\GenomeClass::crossover:
	//pour chaque cours, 1 chance sur 2 de garder le creneau
	for (int i=0; i<NB_COURS; i++)
	{
		if(random(0.0,1.0) < 0.5)
		{
			child.cours[i]->creneau = parent2.cours[i]->creneau;
		}
	}
\end

\GenomeClass::mutator:
	//reinstancier tous les membres du Genome qui sont NULL
	//Pour chaque cours c1 dans Genome->cours
		//prof p1 = c1->prof
		//si random(0.0,1.0) < 0.5
			// mutation -> échanger deux profs de la même matière (aléatoire ?)
			//p2 est le prof à échanger avec p1
			// Pour chaque cours c2
				//Si c2->prof == p2 Alors c2->prof = p1
				//Sinon Si c2->prof == p1 Alors c2->prof = p2
				//décrémenter les nombre de cours de c1 et c2
	//Si prof.nbHeure(c1) > 1 OU salles.nbCours(c1) > 1 OU classes.nbCours(c1) > 1 Alors
		//erreur : nécessite 'correction manuelle'
		//reporter le cours du creneau c1 ?
	//retourner 1 si erreur, 0 sinon
	return 0;
\end

\GenomeClass::evaluator:
	//TODO évaluation du genome (pénalités, etc...)
	return 0;
\end

\User Makefile options:
	CXXFLAGS+=-std=c++98
\end

\Default run parameters :
  Number of generations : 100
  Time limit: 10
  Population size : 100
  Offspring size : 40%
  Mutation probability : 1
  Crossover probability : 1
  Evaluator goal : Minimise
  Selection operator: Tournament 2.0
  Surviving parents: 90%
  Surviving offspring: 90%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong
  Elite: 1
  Print stats: true
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false

  Remote island model: false
  Migration probability: 0

  Save population: false
  Start from file:false
\end